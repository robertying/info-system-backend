#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("info-system-backend:server");
const http2 = require("spdy");
const http = require("http");
const fs = require("fs");
const nodemailer = require("nodemailer");
const SMTPServer = require("smtp-server").SMTPServer;

const emailServer = new SMTPServer({
  secure: true,
  key: fs.readFileSync("/etc/letsencrypt/live/smtp.thuee.org/privkey.pem"),
  cert: fs.readFileSync("/etc/letsencrypt/live/smtp.thuee.org/fullchain.pem"),
  onAuth(auth, session, callback) {
    if (auth.username !== "thuee.org" || auth.password !== "email") {
      return callback(new Error("Invalid username or password"));
    }
  }
});
emailServer.listen(465);
emailServer.on("error", err => {
  console.log("Error %s", err.message);
});

const transporter = nodemailer.createTransport({
  host: "smtp.thuee.org",
  port: 465,
  auth: {
    user: "thuee.org",
    pass: "email"
  }
});
let mailOptions = {
  from: '"电子系信息系统" <noreply@thuee.org>', // sender address
  to: "245978916@qq.com", // list of receivers
  subject: "Hello ✔", // Subject line
  text: "Hello world?", // plain text body
  html: "<b>Hello world?</b>" // html body
};
// send mail with defined transport object
transporter.sendMail(mailOptions, (error, info) => {
  if (error) {
    return console.log(error);
  }
  console.log("Message sent: %s", info.messageId);
  // Preview only available when sending through an Ethereal account
  console.log("Preview URL: %s", nodemailer.getTestMessageUrl(info));

  // Message sent: <b658f8ca-6296-ccf4-8306-87d57a0b4321@example.com>
  // Preview URL: https://ethereal.email/message/WaQKMgKddxQDoou...
});

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTPS server.
 */
let server;
if (process.env.NODE_ENV === "production") {
  const httpsOptions = {
    key: fs.readFileSync("/etc/letsencrypt/live/info.thuee.org/privkey.pem"),
    cert: fs.readFileSync("/etc/letsencrypt/live/info.thuee.org/fullchain.pem")
  };

  server = http2.createServer(httpsOptions, app);

  const redirect = http
    .createServer((req, res) => {
      res.writeHead(301, { Location: "https://" + req.headers.host + req.url });
      res.end();
    })
    .listen(8080);
} else {
  server = http.createServer(app);
}

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);
